pipeline {
  agent any

  /**
   * Set some global env variables that we need later.
   */
  environment {
    HOME = sh(script: "mkdir -p build/ && mktemp -d -p $WORKSPACE/build/", returnStdout: true).trim()
    DOCKER_TAG = params.VERSION.replaceAll(/[^a-zA-Z0-9_.]/, "-")
    REGISTRY = "docker-dev.mission-embedded.net"
    IMAGE = "my_repository:${env.DOCKER_TAG}"
    CREDENTIAL_ID = ""
  }
  parameters {
    string(
      name: 'VERSION',
      defaultValue: env.TAG_NAME ?: 'integration',
      description: 'Version to build (e.g. "2.1.0").'
    )
    booleanParam(
      name: 'BUILD_IMAGE',
      defaultValue: (env.BRANCH_NAME == 'master' || env.TAG_NAME) ? true : false,
      description: '''Build the docker image and push it to the docker registry. Without this option,
                    the latest image from the registry is used.'''
    )
  }
  stages {

    /**
     * Check out code from repository.
     */
    stage('Checkout') {
      steps {
        checkout scm: ([
          $class: 'GitSCM',
          userRemoteConfigs: [
            [credentialsId: '', url: ""]
          ],
          branches: [
            [name: '$BRANCH_NAME']
          ]
        ])
      }
    }

    /**
     * Build the docker image if we are building from master branch or a tag (or parameter is manually set)
     * and push it to the registry.
     */
    stage('Build & push docker image') {
      when {
        expression {
          return params.BUILD_IMAGE
        }
      }
      steps {
        script {
          docker.withRegistry('', "${env.CREDENTIAL_ID}") {
            def image = docker.build(env.IMAGE, "--pull .")
            image.push()
          }
        }
      }
    }

    /**
     * Run unit tests inside docker.
     */
    stage('Pull image , run unit tests & static analysis') {
      steps {
        script {
          docker.withRegistry("https://${env.REGISTRY}", "${env.CREDENTIAL_ID}") {
            docker.image(env.IMAGE).inside("--rm") {
              sh "script.sh"
            }
          }
        }
      }
    }

    /**
     * Stage to visualize unit test and static analysis results.
     */
    stage('Visualize results') {
      steps {
        script {
          // visualize unit test report
          junit "reports/*.xml"
          // publish cppcheck result
          publishCppcheck pattern:'cppcheck-result.xml'
        }
      }
    }
  }

  /**
    * Cleanup build artifacts.
    */
  post {
    always {
      cleanWs()
      script {
        // delete local tag after building image
        if (params.BUILD_IMAGE) {
          sh "docker rmi ${env.IMAGE}"
        }
      }
    }
  }
}